@page "/album/{AlbumId:int}"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> context
@using Microsoft.AspNetCore.Identity;
@using System.Collections
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ApplicationUser> userManager 

@if (@album == null)
{
    <p>Loading...</p>
}
else
{


    <div class="album-display">
        <div class="album-art">
            <img src="https://upload.wikimedia.org/wikipedia/en/8/86/Geogaddi.jpg" />
        </div>

        <div class="album-info">
            <h3>@album.Title</h3>
            <p>@album.Description</p>
            <p>
                <b>Artists:</b>
                @foreach (var artist in album.Artists)
                {
                    <span>@artist.Name</span>
                }
            </p>
            <p><b>Release Date:</b> @album.ReleaseDate</p>
        </div>

    </div>

    <div class="list-add">
        <BlazorServerTest.Pages.Shared.AddToUserCollection AlbumId="AlbumId" />
    </div>

    <div class="album-tracks">
        <h3>Tracks</h3>
        @for (int i = 0; i < album.Tracks.Count; i++)
        {
            var index = i;
            var track = album.Tracks[i];

            <p>@(i + 1). @track.Title</p>
        }
    </div>

    <h3>Reviews</h3>
    <a href="/album/@AlbumId/review">Create Review</a>
    @foreach (var review in album.Reviews)
    {
        <p><b>Reviewed by:</b> @review.User.UserName</p>
        <small>@review.Stars Stars</small>
        <p>@review.Body</p>
        <p>Posted: @review.PostTime</p>


    }
    
}




@code {
    [Parameter] public int AlbumId { get; set; }

    
    private bool ShowModal = false;

    private Album album;
    private Album untrackedAlbum;

    private List<UserCollection> DbUserCollections;




    protected async override Task OnInitializedAsync()
    {
        using (var ctx = context.CreateDbContext())
        {
            var result = await ctx.Albums.AsNoTracking().Where(x => x.Id == AlbumId).Include(x => x.Tracks).Include(x => x.Artists).Include(x => x.Reviews).ThenInclude(x => x.User).FirstOrDefaultAsync();
            var untrackedresult = await ctx.Albums.AsNoTracking().Where(x => x.Id == AlbumId).FirstOrDefaultAsync();
            if (result != null)
            {
                result.Reviews.Reverse();
                album = result;
                untrackedAlbum = untrackedresult;
            }

        }
    }

    private async Task ShowAddToCollectionMenu()
    {
        using (var ctx = await context.CreateDbContextAsync())
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userState = authState.User;

            var user = await userManager.GetUserAsync(userState);
            DbUserCollections = await ctx.UserCollections.AsNoTracking().Where(x => x.Creator == user).Include(x => x.Members).ThenInclude(x => x.Album).ToListAsync();

            foreach (var collection in DbUserCollections)
            {
                if (collection.Members.Any(x => x.Album.Id == AlbumId))
                {
                    collection.IsInCurrentCollection = true;
                }
            }

        }
    }

    private void OnValueChange(ChangeEventArgs e, int index)
    {
        using (var ctx = context.CreateDbContext())
        {
            var checkValue = ctx.UserCollectionMembers.AsNoTracking().Where(x => x.UserCollection == DbUserCollections[index]).Include(x => x.Album).FirstOrDefault();
            UserCollectionMembers newUserCollectionMember = new UserCollectionMembers { Album = album, UserCollection = DbUserCollections[index] };
            if (checkValue == null)
            {
                if ((bool)e.Value == true)
                {
                    ctx.ChangeTracker.Clear();
                    ctx.Add(newUserCollectionMember);
                }
            }
            else
            {
                if (checkValue.Album != null)
                {
                    if ((bool)e.Value == true)
                    {
                        ctx.ChangeTracker.Clear();
                        
                        ctx.Add(newUserCollectionMember);
                    } else
                    {
                        ctx.ChangeTracker.Clear();
                        ctx.Remove(checkValue);
                    }
                }
            }
            ctx.SaveChanges();
        }
    }

}
